name: Deploy to ephemeral environment

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  scaffold:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create environment
        uses: docker://ghcr.io/humanitec/hctl:latest
        with:
          args: create environment ${{ github.event.repository.name }} ephemeral-pr-${{ github.event.pull_request.number }} --set env_type_id=development
        env:
          HUMANITEC_AUTH_TOKEN: ${{ secrets.CANYON_DEMO_CANYON_AUTH_TOKEN_PROD }}
          HUMANITEC_ORG: ${{ secrets.CANYON_DEMO_CANYON_ORG }}
        continue-on-error: true

  release:
    needs: scaffold
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.CANYON_DEMO_GCP_CREDENTIALS }}'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker europe-west3-docker.pkg.dev --quiet

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: europe-west3-docker.pkg.dev/htc-demo-00-gcp/humanitec/app:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Provision infrastructure with Humanitec
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/github/workspace" \
            -w /github/workspace \
            --user "$(id -u):$(id -g)" \
            -e HUMANITEC_AUTH_TOKEN="${{ secrets.CANYON_DEMO_CANYON_AUTH_TOKEN_PROD }}" \
            -e HUMANITEC_ORG="${{ secrets.CANYON_DEMO_CANYON_ORG }}" \
            ghcr.io/humanitec/hctl:latest \
            deploy ${{ github.event.repository.name }} ephemeral-pr-${{ github.event.pull_request.number }} ./manifest.yaml --no-prompt --output values.yaml

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Extract deployment configuration
        id: parse_yaml
        run: |
          pip install pyyaml
          python -c "
          import yaml
          with open('values.yaml', 'r') as f:
              config = yaml.safe_load(f)
          print(f'::set-output name=bucket-name::{config[\"main\"].get(\"BUCKET_NAME\", \"unspecified\")}')
          print(f'::set-output name=queue-name::{config[\"main\"].get(\"QUEUE_NAME\", \"unspecified\")}')
          print(f'::set-output name=service-account::{config[\"main\"].get(\"SERVICE_ACCOUNT\", \"unspecified\")}')
          print(f'::set-output name=namespace::{config[\"main\"].get(\"NAMESPACE\", \"unspecified\")}')
          "

      - name: Install GKE auth plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          echo 'export USE_GKE_GCLOUD_AUTH_PLUGIN=True' >> $GITHUB_ENV

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials second-call-demo-gke --region europe-west3 --project htc-demo-00-gcp

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Deploy with Helm
        run: |
          helm upgrade --install hello-world ./chart \
            --set image.tag=${{ github.sha }} \
            --set bucket.name=${{ steps.parse_yaml.outputs.bucket-name }} \
            --set queue.name=${{ steps.parse_yaml.outputs.queue-name }} \
            --set serviceAccount=${{ steps.parse_yaml.outputs.service-account }} \
            --namespace=${{ steps.parse_yaml.outputs.namespace }}

      - name: Wait for service and show URL
        run: |
          echo "Waiting for LoadBalancer IP..."
          for i in {1..30}; do
            IP=$(kubectl get svc hello-world-hello-world -n ${{ steps.parse_yaml.outputs.namespace }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$IP" ]; then
              echo "Service is available at IP: $IP"
              echo "APP_IP=$IP" >> $GITHUB_ENV
              echo "ðŸŽ‰ App is ready at http://$IP"
              break
            fi
            echo "Still waiting..."
            sleep 10
          done